import numpy as np
import pandas as pd
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import os

class SIRModel:
    def __init__(self, beta, gamma, N):
        self.beta = beta   # Rate of infection
        self.gamma = gamma # Rate of recovery
        self.N = N         # Total population

    def model(self, y, t):
        S, I, R = y
        dSdt = -self.beta * S * I / self.N
        dIdt = self.beta * S * I / self.N - self.gamma * I
        dRdt = self.gamma * I
        return dSdt, dIdt, dRdt

    def simulate(self, S0, I0, R0, t):
        y0 = S0, I0, R0
        solution = odeint(self.model, y0, t)
        S, I, R = solution.T
        return S, I, R

def run_simulation(beta, gamma, N, I0, days):
    model = SIRModel(beta, gamma, N)
    S0, R0 = N - I0, 0
    t = np.linspace(0, days, days)
    S, I, R = model.simulate(S0, I0, R0, t)
    return pd.DataFrame({'Day': t, 'Susceptible': S, 'Infected': I, 'Recovered': R})

def plot_results(results):
    plt.figure(figsize=(10, 6))
    plt.plot(results['Day'], results['Susceptible'], label='Susceptible')
    plt.plot(results['Day'], results['Infected'], label='Infected')
    plt.plot(results['Day'], results['Recovered'], label='Recovered')
    plt.xlabel('Days')
    plt.ylabel('Number of Users')
    plt.title('SIR Model for Malware Spread in Nigerian Social Media Users')
    plt.legend()
    
    # Create 'analysis/figures' directory if it doesn't exist
    output_dir = os.path.join('analysis', 'figures')
    os.makedirs(output_dir, exist_ok=True)
    
    # Save the plot
    plt.savefig(os.path.join(output_dir, 'sir_model_results.png'))
    plt.close()

def save_results(results):
    # Create 'simulations/results' directory if it doesn't exist
    output_dir = os.path.join('simulations', 'results')
    os.makedirs(output_dir, exist_ok=True)
    
    # Save the results
    output_path = os.path.join(output_dir, 'sir_model_results.csv')
    results.to_csv(output_path, index=False)
    print(f"Results saved to {output_path}")

if __name__ == "__main__":
    # Set parameters
    N = 1000000  # Total number of social media users in Nigeria (example value)
    I0 = 1000    # Initial number of infected users
    beta = 0.3   # Infection rate
    gamma = 0.1  # Recovery rate
    days = 100   # Number of days to simulate

    # Run simulation
    results = run_simulation(beta, gamma, N, I0, days)

    # Display first few rows of results
    print(results.head())

    # Plot results
    plot_results(results)

    # Save results
    save_results(results)