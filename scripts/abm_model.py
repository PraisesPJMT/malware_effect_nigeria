import numpy as np
import pandas as pd
from tqdm import tqdm

class User:
    def __init__(self, id, age, location, occupation):
        self.id = id
        self.age = age
        self.location = location
        self.occupation = occupation
        self.infected = False
        self.days_infected = 0
        self.recovered = False

class MalwareABM:
    def __init__(self, num_users, infection_rate, recovery_rate):
        self.num_users = num_users
        self.infection_rate = infection_rate
        self.recovery_rate = recovery_rate
        self.users = []
        self.initialize_users()

    def initialize_users(self):
        locations = ['Lagos', 'Abuja', 'Kano', 'Ibadan', 'Port Harcourt']
        occupations = ['Student', 'Professional', 'Business Owner', 'Unemployed']
        
        for i in range(self.num_users):
            age = np.random.randint(18, 65)
            location = np.random.choice(locations)
            occupation = np.random.choice(occupations)
            self.users.append(User(i, age, location, occupation))

    def infect_initial(self, num_initial):
        initial_infected = np.random.choice(self.num_users, num_initial, replace=False)
        for i in initial_infected:
            self.users[i].infected = True

    def spread_malware(self):
        infected_indices = [i for i, user in enumerate(self.users) if user.infected]
        
        for i in infected_indices:
            self.users[i].days_infected += 1
            
            # Attempt to infect other users
            interaction_indices = np.random.choice(self.num_users, 5, replace=False)
            for j in interaction_indices:
                if not self.users[j].infected and not self.users[j].recovered:
                    if np.random.random() < self.infection_rate:
                        self.users[j].infected = True
            
            # Check for recovery
            if np.random.random() < self.recovery_rate:
                self.users[i].infected = False
                self.users[i].recovered = True

    def run_simulation(self, days):
        results = []
        for _ in tqdm(range(days)):
            self.spread_malware()
            infected = sum(1 for user in self.users if user.infected)
            recovered = sum(1 for user in self.users if user.recovered)
            susceptible = self.num_users - infected - recovered
            results.append([susceptible, infected, recovered])
        return pd.DataFrame(results, columns=['Susceptible', 'Infected', 'Recovered'])

if __name__ == "__main__":
    # Test the model
    model = MalwareABM(10000, 0.3, 0.1)
    model.infect_initial(100)
    results = model.run_simulation(100)
    print(results.head())