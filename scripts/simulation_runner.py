import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from sir_model import SIRModel, run_simulation as run_sir_simulation
from abm_model import MalwareABM
from tqdm import tqdm
from tabulate import tabulate

def run_sir_experiments(experiments):
    results = []
    for exp in tqdm(experiments, desc="Running SIR experiments"):
        sim_results = run_sir_simulation(exp['beta'], exp['gamma'], exp['N'], exp['I0'], exp['days'])
        sim_results['experiment'] = exp['name']
        results.append(sim_results)
    return pd.concat(results)

def run_abm_experiments(experiments):
    results = []
    for exp in tqdm(experiments, desc="Running ABM experiments"):
        model = MalwareABM(exp['N'], exp['infection_rate'], exp['recovery_rate'])
        model.infect_initial(exp['I0'])
        sim_results = model.run_simulation(exp['days'])
        sim_results['experiment'] = exp['name']
        results.append(sim_results)
    return pd.concat(results)

def plot_comparison(sir_results, abm_results, metric='Infected'):
    plt.figure(figsize=(12, 6))
    
    sir_data = sir_results[sir_results['experiment'] == sir_results['experiment'].unique()[0]]
    abm_data = abm_results[abm_results['experiment'] == abm_results['experiment'].unique()[0]]
    
    plt.plot(sir_data['Day'], sir_data[metric], label='SIR Model')
    plt.plot(abm_data.index, abm_data[metric], label='ABM Model')
    
    plt.xlabel('Days')
    plt.ylabel(f'Number of {metric} Users')
    plt.title(f'Comparison of SIR and ABM Models: {metric} Users Over Time')
    plt.legend()
    
    output_dir = os.path.join('analysis', 'figures')
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, f'model_comparison_{metric.lower()}.png'))
    plt.close()

def save_results(sir_results, abm_results):
    output_dir = os.path.join('simulations', 'results')
    os.makedirs(output_dir, exist_ok=True)
    
    sir_output = os.path.join(output_dir, 'sir_experiments_results.csv')
    abm_output = os.path.join(output_dir, 'abm_experiments_results.csv')
    
    sir_results.to_csv(sir_output, index=False)
    abm_results.to_csv(abm_output, index=False)
    
    print(f"SIR results saved to {sir_output}")
    print(f"ABM results saved to {abm_output}")

def print_summary_table(sir_results, abm_results):
    summary_data = []
    metrics = ['Susceptible', 'Infected', 'Recovered']
    
    for experiment in sir_results['experiment'].unique():
        sir_data = sir_results[sir_results['experiment'] == experiment]
        abm_data = abm_results[abm_results['experiment'] == experiment]
        
        row = [experiment]
        for metric in metrics:
            sir_max = sir_data[metric].max()
            sir_final = sir_data[metric].iloc[-1]
            abm_max = abm_data[metric].max()
            abm_final = abm_data[metric].iloc[-1]
            
            row.extend([
                f"SIR Max: {sir_max:.0f}, Final: {sir_final:.0f}",
                f"ABM Max: {abm_max:.0f}, Final: {abm_final:.0f}"
            ])
        
        summary_data.append(row)
    
    headers = ['Experiment'] + [f'{metric} (SIR / ABM)' for metric in metrics]
    print("\nSummary Table:")
    print(tabulate(summary_data, headers=headers, tablefmt="grid"))

if __name__ == "__main__":
    # Define experiments
    experiments = [
        {'name': 'Baseline', 'N': 100000, 'I0': 100, 'beta': 0.3, 'gamma': 0.1, 'infection_rate': 0.3, 'recovery_rate': 0.1, 'days': 100},
        {'name': 'High Infection', 'N': 100000, 'I0': 100, 'beta': 0.5, 'gamma': 0.1, 'infection_rate': 0.5, 'recovery_rate': 0.1, 'days': 100},
        {'name': 'High Recovery', 'N': 100000, 'I0': 100, 'beta': 0.3, 'gamma': 0.2, 'infection_rate': 0.3, 'recovery_rate': 0.2, 'days': 100},
    ]

    # Run experiments
    sir_results = run_sir_experiments(experiments)
    abm_results = run_abm_experiments(experiments)

    # Plot comparisons
    plot_comparison(sir_results, abm_results, 'Infected')
    plot_comparison(sir_results, abm_results, 'Susceptible')
    plot_comparison(sir_results, abm_results, 'Recovered')

    # Save results
    save_results(sir_results, abm_results)

    # Print summary table
    print_summary_table(sir_results, abm_results)

    print("Simulation complete. Check the 'simulations/results' and 'analysis/figures' directories for output.")