import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import os

def generate_mock_data(num_records=1000):
    # Set random seed for reproducibility
    np.random.seed(42)
    
    # Generate dates
    start_date = datetime(2023, 1, 1)
    dates = [start_date + timedelta(days=i) for i in range(num_records)]
    
    # Generate data
    data = {
        'date': dates,
        'num_attacks': np.random.poisson(lam=50, size=num_records),
        'malware_type': np.random.choice(['Ransomware', 'Phishing', 'Trojan', 'Adware', 'Spyware'], size=num_records),
        'affected_device': np.random.choice(['Mobile', 'Desktop', 'Tablet'], size=num_records, p=[0.6, 0.3, 0.1]),
        'user_age': np.random.randint(18, 65, size=num_records),
        'user_location': np.random.choice(['Lagos', 'Abuja', 'Kano', 'Ibadan', 'Port Harcourt'], size=num_records),
        'user_occupation': np.random.choice(['Student', 'Professional', 'Business Owner', 'Unemployed'], size=num_records),
        'financial_loss': np.random.exponential(1000, size=num_records),
        'productivity_loss_hours': np.random.uniform(0, 24, size=num_records)
    }
    
    # Create DataFrame
    df = pd.DataFrame(data)
    
    # Add some correlations
    df.loc[df['malware_type'] == 'Ransomware', 'financial_loss'] *= 2
    df.loc[df['affected_device'] == 'Desktop', 'productivity_loss_hours'] *= 1.5
    df.loc[df['user_age'] > 50, 'financial_loss'] *= 1.2
    
    return df

def save_data(df, filename='mock_malware_data.csv'):
    # Create 'data/raw' directory if it doesn't exist
    output_dir = os.path.join('data', 'raw')
    os.makedirs(output_dir, exist_ok=True)
    
    # Save the dataframe to a CSV file
    output_path = os.path.join(output_dir, filename)
    df.to_csv(output_path, index=False)
    print(f"Data saved to {output_path}")

if __name__ == "__main__":
    # Generate mock data
    mock_data = generate_mock_data()
    
    # Display first few rows and basic statistics
    print(mock_data.head())
    print(mock_data.describe())
    
    # Save the data
    save_data(mock_data)