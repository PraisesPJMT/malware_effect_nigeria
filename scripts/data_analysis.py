import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import os

def load_data():
    sir_data = pd.read_csv(os.path.join('simulations', 'results', 'sir_experiments_results.csv'))
    abm_data = pd.read_csv(os.path.join('simulations', 'results', 'abm_experiments_results.csv'))
    return sir_data, abm_data

def calculate_peak_infections(data):
    return data.groupby('experiment')['Infected'].max()

def calculate_total_affected(data):
    return data.groupby('experiment').apply(lambda x: x['Infected'].sum())

def calculate_duration(data):
    return data.groupby('experiment').apply(lambda x: (x['Infected'] > 0).sum())

def plot_peak_infections(sir_peaks, abm_peaks):
    plt.figure(figsize=(10, 6))
    x = range(len(sir_peaks))
    width = 0.35
    
    plt.bar([i - width/2 for i in x], sir_peaks, width, label='SIR Model', color='skyblue')
    plt.bar([i + width/2 for i in x], abm_peaks, width, label='ABM Model', color='orange')
    
    plt.xlabel('Experiments')
    plt.ylabel('Peak Infections')
    plt.title('Peak Infections Comparison: SIR vs ABM')
    plt.xticks(x, sir_peaks.index, rotation=45)
    plt.legend()
    
    save_plot('peak_infections_comparison.png')

def plot_total_affected(sir_total, abm_total):
    plt.figure(figsize=(10, 6))
    x = range(len(sir_total))
    width = 0.35
    
    plt.bar([i - width/2 for i in x], sir_total, width, label='SIR Model', color='skyblue')
    plt.bar([i + width/2 for i in x], abm_total, width, label='ABM Model', color='orange')
    
    plt.xlabel('Experiments')
    plt.ylabel('Total Affected Users')
    plt.title('Total Affected Users Comparison: SIR vs ABM')
    plt.xticks(x, sir_total.index, rotation=45)
    plt.legend()
    
    save_plot('total_affected_comparison.png')

def plot_infection_duration(sir_duration, abm_duration):
    plt.figure(figsize=(10, 6))
    x = range(len(sir_duration))
    width = 0.35
    
    plt.bar([i - width/2 for i in x], sir_duration, width, label='SIR Model', color='skyblue')
    plt.bar([i + width/2 for i in x], abm_duration, width, label='ABM Model', color='orange')
    
    plt.xlabel('Experiments')
    plt.ylabel('Duration (Days)')
    plt.title('Infection Duration Comparison: SIR vs ABM')
    plt.xticks(x, sir_duration.index, rotation=45)
    plt.legend()
    
    save_plot('infection_duration_comparison.png')

def plot_heatmap(data, title):
    plt.figure(figsize=(12, 8))
    sns.heatmap(data, annot=True, cmap='YlOrRd', fmt='.0f')
    plt.title(title)
    save_plot(f"{title.lower().replace(' ', '_')}.png")

def save_plot(filename):
    output_dir = os.path.join('analysis', 'figures')
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, filename))
    plt.close()

def perform_statistical_tests(sir_data, abm_data):
    tests = {}
    for experiment in sir_data['experiment'].unique():
        sir_infected = sir_data[sir_data['experiment'] == experiment]['Infected']
        abm_infected = abm_data[abm_data['experiment'] == experiment]['Infected']
        
        t_stat, p_value = stats.ttest_ind(sir_infected, abm_infected)
        tests[experiment] = {'t_statistic': t_stat, 'p_value': p_value}
    
    return pd.DataFrame(tests).T

def main():
    sir_data, abm_data = load_data()
    
    # Calculate metrics
    sir_peaks = calculate_peak_infections(sir_data)
    abm_peaks = calculate_peak_infections(abm_data)
    sir_total = calculate_total_affected(sir_data)
    abm_total = calculate_total_affected(abm_data)
    sir_duration = calculate_duration(sir_data)
    abm_duration = calculate_duration(abm_data)
    
    # Generate plots
    plot_peak_infections(sir_peaks, abm_peaks)
    plot_total_affected(sir_total, abm_total)
    plot_infection_duration(sir_duration, abm_duration)
    
    # Generate heatmaps
    plot_heatmap(sir_data.pivot(index='Day', columns='experiment', values='Infected'), 'SIR Model: Infected Users Over Time')
    plot_heatmap(abm_data.pivot(index='Day', columns='experiment', values='Infected'), 'ABM Model: Infected Users Over Time')
    
    # Perform statistical tests
    statistical_tests = perform_statistical_tests(sir_data, abm_data)
    print("Statistical Test Results:")
    print(statistical_tests)
    
    # Save statistical test results
    output_dir = os.path.join('analysis', 'results')
    os.makedirs(output_dir, exist_ok=True)
    statistical_tests.to_csv(os.path.join(output_dir, 'statistical_test_results.csv'))

if __name__ == "__main__":
    main()