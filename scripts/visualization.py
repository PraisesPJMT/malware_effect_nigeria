import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap
from tabulate import tabulate
import os

def load_data():
    sir_data = pd.read_csv(os.path.join('simulations', 'results', 'sir_experiments_results.csv'))
    abm_data = pd.read_csv(os.path.join('simulations', 'results', 'abm_experiments_results.csv'))
    
    # Ensure 'Day' column exists
    for data in [sir_data, abm_data]:
        if 'Day' not in data.columns:
            data['Day'] = data.groupby('experiment').cumcount()
    
    # Ensure all necessary columns exist
    required_columns = ['Day', 'experiment', 'Susceptible', 'Infected', 'Recovered']
    for data in [sir_data, abm_data]:
        missing_columns = set(required_columns) - set(data.columns)
        if missing_columns:
            raise ValueError(f"Missing columns in data: {missing_columns}")
    
    return sir_data, abm_data

def save_plot(filename):
    output_dir = os.path.join('analysis', 'figures')
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, filename), dpi=300, bbox_inches='tight')
    plt.close()

def print_table(data, headers, title):
    print(f"\n{title}")
    print(tabulate(data, headers=headers, tablefmt="grid"))
    print("\n")

def plot_infection_curves(sir_data, abm_data):
    scenarios = ['Baseline', 'High Infection', 'High Recovery']
    for scenario in scenarios:
        plt.figure(figsize=(12, 6))
        peak_infections = {'SIR': {}, 'ABM': {}}
        
        for experiment in sir_data['experiment'].unique():
            if scenario in experiment:
                sir_exp_data = sir_data[sir_data['experiment'] == experiment]
                abm_exp_data = abm_data[abm_data['experiment'] == experiment]
                
                plt.plot(sir_exp_data['Day'], sir_exp_data['Infected'], label=f'SIR - {experiment}', linestyle='-')
                plt.plot(abm_exp_data['Day'], abm_exp_data['Infected'], label=f'ABM - {experiment}', linestyle='--')
                
                peak_infections['SIR'][experiment] = sir_exp_data['Infected'].max()
                peak_infections['ABM'][experiment] = abm_exp_data['Infected'].max()
        
        plt.xlabel('Days')
        plt.ylabel('Number of Infected Users')
        plt.title(f'Infection Curves: SIR vs ABM Models - {scenario}')
        plt.legend()
        plt.grid(True, linestyle=':', alpha=0.7)
        save_plot(f'infection_curves_comparison_{scenario.lower().replace(" ", "_")}.png')
    
    # Print table of peak infections
    table_data = [(exp, peak_infections['SIR'][exp], peak_infections['ABM'][exp]) for exp in peak_infections['SIR']]
    print_table(table_data, ['Experiment', 'SIR Peak', 'ABM Peak'], 'Peak Infections')

def plot_phase_diagram(data, model_type):
    plt.figure(figsize=(10, 8))
    final_states = []
    
    for experiment in data['experiment'].unique():
        exp_data = data[data['experiment'] == experiment]
        plt.plot(exp_data['Susceptible'], exp_data['Infected'], label=experiment)
        
        final_states.append((experiment, 
                             exp_data['Susceptible'].iloc[-1], 
                             exp_data['Infected'].iloc[-1], 
                             exp_data['Recovered'].iloc[-1]))
    
    plt.xlabel('Susceptible Users')
    plt.ylabel('Infected Users')
    plt.title(f'Phase Diagram: {model_type} Model')
    plt.legend()
    plt.grid(True, linestyle=':', alpha=0.7)
    save_plot(f'phase_diagram_{model_type.lower()}.png')
    
    # Print table of final states
    print_table(final_states, ['Experiment', 'Final Susceptible', 'Final Infected', 'Final Recovered'], 
                f'Final States - {model_type} Model')

def plot_stacked_area(data, model_type):
    plt.figure(figsize=(12, 6))
    data_pivoted = data.pivot(index='Day', columns='experiment', values=['Susceptible', 'Infected', 'Recovered'])
    data_pivoted.plot(kind='area', stacked=True, alpha=0.7)
    
    plt.xlabel('Days')
    plt.ylabel('Number of Users')
    plt.title(f'Stacked Area Plot: {model_type} Model')
    plt.legend(title='State - Experiment', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    save_plot(f'stacked_area_{model_type.lower()}.png')
    
    # Calculate and print average proportions
    total_population = data.groupby('experiment')[['Susceptible', 'Infected', 'Recovered']].sum().sum(axis=1)
    avg_proportions = data.groupby('experiment')[['Susceptible', 'Infected', 'Recovered']].mean().div(total_population, axis=0)
    print_table(avg_proportions.reset_index().values.tolist(), 
                ['Experiment', 'Avg Susceptible', 'Avg Infected', 'Avg Recovered'], 
                f'Average Proportions - {model_type} Model')

def plot_heatmap(data, model_type):
    pivot_data = data.pivot(index='Day', columns='experiment', values='Infected')
    
    plt.figure(figsize=(12, 8))
    custom_cmap = LinearSegmentedColormap.from_list("custom", ["#FFFFFF", "#FF0000"])
    sns.heatmap(pivot_data, cmap=custom_cmap, cbar_kws={'label': 'Number of Infected Users'})
    
    plt.xlabel('Experiments')
    plt.ylabel('Days')
    plt.title(f'Heatmap of Infected Users Over Time: {model_type} Model')
    save_plot(f'heatmap_{model_type.lower()}.png')
    
    # Calculate and print statistics
    stats = pivot_data.agg(['mean', 'max', 'idxmax']).T
    stats.columns = ['Average Infected', 'Peak Infected', 'Day of Peak']
    print_table(stats.reset_index().values.tolist(), 
                ['Experiment', 'Average Infected', 'Peak Infected', 'Day of Peak'], 
                f'Infection Statistics - {model_type} Model')

def plot_scatter_matrix(data, model_type):
    plt.figure(figsize=(15, 15))
    sns.pairplot(data, hue='experiment', vars=['Susceptible', 'Infected', 'Recovered'], 
                 plot_kws={'alpha': 0.6})
    plt.suptitle(f'Scatter Matrix: {model_type} Model', y=1.02)
    save_plot(f'scatter_matrix_{model_type.lower()}.png')
    
    # Calculate and print correlation matrix
    corr_matrices = data.groupby('experiment')[['Susceptible', 'Infected', 'Recovered']].corr()
    avg_corr_matrix = corr_matrices.groupby(level=1).mean()
    
    print_table(avg_corr_matrix.values.tolist(), 
                ['', 'Susceptible', 'Infected', 'Recovered'], 
                f'Average Correlation Matrix - {model_type} Model')

def main():
    try:
        sir_data, abm_data = load_data()
        
        plot_infection_curves(sir_data, abm_data)
        
        for data, model_type in [(sir_data, 'SIR'), (abm_data, 'ABM')]:
            plot_phase_diagram(data, model_type)
            plot_stacked_area(data, model_type)
            plot_heatmap(data, model_type)
            plot_scatter_matrix(data, model_type)
        
        print("Visualization complete. Check the 'analysis/figures' directory for output.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print("Here's more information about the error:")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()